# 进行左右对称
def GetSymmetric(pixel, size):
    '''
    pixel: np array with shape (count,size,size,1)
    '''
    count = pixel.shape[0]
    sym = np.zeros((count, size, size, NUM_CHANNEL))
    for i in range(count):
        for j in range(size):
            for k in range(size):
                sym[i,j,k,0] = pixel[i,j,size-k-1,0]
    return sym

symmetric_x_train = GetSymmetric(X_train, IMAGE_SIZE)
X_train = np.concatenate((X_train, symmetric_x_train), axis = 0)
y_train = np.concatenate((y_train, y_train))



import random

# Cliped
def GetClipedImage(pixel, start):
    '''
    pixel: raw 48*48 pixel data with shape (count, 48, 48, 1)
    start: a tuple such as (0,0),(2,3),(4,2), represents start point of clipped 42*42 image
    '''
    count = pixel.shape[0]
    out = np.zeros((count, CLIPED_SIZE, CLIPED_SIZE, NUM_CHANNEL))
    for i in range(count):
        for j in range(CLIPED_SIZE):
            out[i,j,:,0] = pixel[i,start[0]+j,start[1]:start[1]+CLIPED_SIZE,0]
    return out


# To process
def DataPreprocess(pixel, label = []):
    '''
    pixel: pixel data with shape (count,48,48,1)
    label: optical, corresponding label of pixel
    '''
    a = random.randint(0,2)
    b = random.randint(3,5)
    c = random.randint(0,2)
    d = random.randint(3,5)
    pixel1 = GetClipedImage(pixel, (a,c))
    pixel2 = GetClipedImage(pixel, (a,d))
    pixel3 = GetClipedImage(pixel, (b,c))
    pixel4 = GetClipedImage(pixel, (b,d))
    out_p = np.concatenate((pixel1, pixel2, pixel3, pixel4), axis = 0)
    if len(label) == 0:
        return out_p
    else:
        out_l = np.concatenate((label, label, label, label), axis = 0)
        return (out_p, out_l)




(X_train, y_train) = DataPreprocess(X_train, y_train)
(X_test, y_test) = DataPreprocess(X_test, y_test)